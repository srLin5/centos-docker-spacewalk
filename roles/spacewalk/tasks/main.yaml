---
- name: Check service firewalld
  command: systemctl status firewalld
  register: firewalld
  ignore_errors: True

- name: Enable http and https in firewalld
  shell: |
    firewall-cmd --list-service | grep {{ item }} ||
    ( firewall-cmd --add-service={{ item }} &&
      firewall-cmd --add-service={{ item }} --permanent )
  with_items:
    - http
    - https
  when: firewalld.rc == 0

- name: Prepare storages
  shell: |
    mkdir -p {{ item }}
    restorecon -rv  {{ item }}
    chcon -Rt svirt_sandbox_file_t {{ item }}
  with_items:
    - /var/satellite
    - /root/ssl-build

- name: Install pctl {{ db_version }} to postgresql
  shell:
    docker exec {{ db_host }} /bin/bash -c "apt update && apt install postgresql-pltcl-{{ db_version }} -y"

- name: Copy files to remote systems to build image for Docker
  copy: src={{ item }} dest=/root/{{ item }}
  with_items:
    - Dockerfile
    - answer.txt
    - bin
    - bin/docker-spacewalk-setup.sh
    - bin/docker-spacewalk-run.sh
  when: docker_image == "spacewalk"
  tags:
    - build

- name: Build Docker image with spacewalk
  command:
    docker build -t {{ docker_image }} .
  when: docker_image == "spacewalk"
  tags:
    - build

- name: Download spacewalk image from Docker hub
  command:
    docker pull {{ docker_image }}
  when: docker_image != "spacewalk"

- name: Delete old instance of Spacewalk
  shell: |
     ! docker inspect {{ spacewalk_host }} || docker rm -f {{ spacewalk_host }}

- name: Install spacewalk {{ db_type }} from docker image
  shell: |
    docker run -d --name {{ spacewalk_host }} \
           --link {{ db_host }}:postgresql-host \
           -p 80:80 -p 443:443 -p 69:69 -p 5222:5222 \
           -e POSTGRES_PASSWORD={{ db_pass }} \
           -e ORACLE_PASSWORD={{ db_pass }} \
           -e HOST_HOSTNAME=$( hostname ) \
           -e DB_TYPE={{ db_type }} \
           -v /var/satellite/:/var/satellite/:Z \
           -v /root/ssl-build:/root/ssl-build:Z \
           {{ docker_image }}:{{ spacewalk_version }}

- name: Check if installation finished done
  shell: |
    watchdog=30
    while ! docker logs {{ spacewalk_host }} 2> /dev/null | grep -e "^Installation complete.$" -e "^Java virtual machine used" ; do
      watchdog=$(( $watchdog - 1 ))
      sleep 10 && [ $watchdog -eq 0 ] && break
    done
    true

- name: Backup ssl certs
  shell: |
    rpm -q zip || yum install zip -y
    zip ssl -r ssl-build
  tags:
    - backup
  args:
    chdir: "/root/"

- fetch:
    src: /root/ssl.zip
    dest: ssl-build
  tags:
    - backup

- name: Check docker logs
  shell:
    docker logs {{ spacewalk_host }}
  register: dockerlog

- name: Check ports
  shell:
    nmap $( hostname )
  register: nmap

- debug: var=nmap.stdout_lines

- name: Load first page
  shell: |
    URL=https://$( hostname )/rhn/newlogin/CreateFirstUser.do
    URL_LOGIN=https://$( hostname )/rhn/Login.do
    curl --silent $URL --insecure -D /dev/stdout -o /dev/null
    watchdog=30
    while true; do
        EC=$( curl -o /dev/null --insecure --silent --head --write-out '%{http_code}' "$URL" )
        ([ "$EC" == "200" ] || [ $watchdog -eq 0 ]) && break
        # upgrade
        if [ "$EC" == "403" ]; then
            EC=$( curl -o /dev/null --insecure --silent --head --write-out '%{http_code}' "$URL_LOGIN" )
            [ "$EC" -eq 200 ] && break
            echo "http2 code: $EC"
        fi
        echo "http code: $EC"
        sleep 3 && watchdog=$(( $watchdog - 1 ))
    done
  register: curl
  tags:
    - curl

- debug: var=curl.stdout_lines

